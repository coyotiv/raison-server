#!/usr/bin/env node

/* eslint-disable */

/**
 * Module dependencies.
 */

const app = require('../src/app')
const debug = require('debug')('backend:server')
const http = require('http')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Parse optional seed file from CLI args or env.
 */

function getSeedFileFromArgs() {
  const args = process.argv.slice(2)
  const envFile = process.env.SEED_FILE
  let cliFile
  const idx = args.findIndex((a) => a === '--seedFile' || a === '--seed-file')
  if (idx !== -1 && args[idx + 1]) cliFile = args[idx + 1]
  const eq = args.find((a) => a.startsWith('--seedFile=') || a.startsWith('--seed-file='))
  if (!cliFile && eq) cliFile = eq.split('=')[1]
  return cliFile || envFile
}

/**
 * Start server, optionally seeding database first.
 */

async function start() {
  const seedFile = getSeedFileFromArgs()
  if (seedFile) {
    const connection = require('../src/database-connection')
    const { seedFromFile } = require('../src/seed/seed')
    try {
      if (connection.readyState !== 1) {
        await new Promise((resolve) => connection.once('open', resolve))
      }
      await seedFromFile(seedFile)
      console.log(`[seed] Imported data from ${seedFile}`)
    } catch (err) {
      console.error('[seed] Failed to import data:', err)
      process.exit(1)
    }
  }

  server.listen(port)
  server.on('error', onError)
  server.on('listening', onListening)
}

start()

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`)
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`)
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`
  debug(`Listening on ${bind}`)
}
